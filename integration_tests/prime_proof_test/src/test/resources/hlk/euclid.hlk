reference defs.hlk;

define recursive function P to myset
  at level 0 by set_1( p[0] )
  at level k by P[k - 1] \cup set_1( p[k] )
;

define recursive predicate F
# at level 0 by all t ( ( PRIME(t) impl t \in P[0] ) and
#                       ( t \in P[0] impl PRIME(t) ) )
  at level k by all t ( ( PRIME(t) impl t \in P[k] ) and
                        ( t \in P[k] impl PRIME(t) ) )
;

define recursive function num to nat
  at level 0 by p[0]
  at level k by num[k - 1] * p[k] 
;

define proof the-proof-0
  proves F[0], PRIME-DIV, REM :-;

  continued by proof the-proof-rec[0];
;
define proof the-proof-1
  proves F[1], PRIME-DIV, REM :-;

  continued by proof the-proof-rec[1];
;

define proof the-proof-2
  proves F[2], PRIME-DIV, REM :-;

  continued by proof the-proof-rec[2];
;

define recursive proof bigger
  at level k proves
    :- num[k] + 1 != 1;

  with undef !=
    :- not num[k] + 1 = 1;

  with not right
    num[k] + 1 = 1 :-;

  explicit axiom num[k] + 1 = 1 :-;
;

define recursive proof the-proof-rec
  at level k proves
    F[k], PRIME-DIV, REM :- ;

  with undef PRIME-DIV
    all m ( m != 1 impl ex l ( PRIME(l) and DIV( l, m ) ) ) :- ;
  with all left
    num[k] + 1 != 1 impl ex l ( PRIME(l) and DIV( l, num[k] + 1 ) ) :- ;

  with impl left
    ex l ( PRIME(l) and DIV( l, num[k] + 1 ) ) :- 
    left by proof bigger[k];

  with ex left
    PRIME(l_0) and DIV( l_0, num[k] + 1) :-;

  with and left
    PRIME(l_0), DIV( l_0, num[k] + 1) :-;

  with undef F[k]
    all t ( ( PRIME(t) impl t \in P[k] ) and ( t \in P[k] impl PRIME(t) ) ) :-;

  with all left
    ( PRIME(l_0) impl l_0 \in P[k] ) and ( l_0 \in P[k] impl PRIME(l_0) ) :-;

  with and left
    PRIME(l_0) impl l_0 \in P[k] :-;

  with impl left
    l_0 \in P[k] :-
    left auto propositional PRIME(l_0) :- PRIME(l_0);

  with cut DIV( l_0, num[k] )
    left by proof rec[k];

  with cut l_0 = 1
    left by proof lem(num[k]);

  with undef PRIME
    1 < l_0 and all l ( DIV( l, l_0 ) impl ( l = 1 or l = l_0 ) ) :-;

  with and left
    1 < l_0 :-;

  explicit axiom 1 < l_0, l_0 = 1 :-;
;

# todo: maybe proof universal instead of meta term
define proof lem
  with meta term t of type nat;
  proves DIV(l_0, t), DIV(l_0, t + 1) :- l_0 = 1;

  with undef DIV
    ex r l_0 * r = t + 1 , ex r l_0 * r = t :-;

  with ex left
    l_0 * r_0 = t + 1 , l_0 * r_1 = t :-;

  explicit axiom l_0 * r_0 = t + 1 , l_0 * r_1 = t :- l_0 = 1;
;

define recursive proof rec
  at level 0 proves
    l_0 \in P[0] :- DIV(l_0, num[0]);

    with undef P[0]
      l_0 \in set_1( p[0] ) :-;

    with undef set_1
      l_0 = p[0] :-;

    with undef DIV
      :- ex r l_0 * r = num[0];

    with ex right
      :- l_0 * 1 = num[0];

    with undef num[0]
      :- l_0 * 1 = p[0];  

    explicit axiom l_0 = p[0] :- l_0 * 1 = p[0];

  at level k proves
    l_0 \in P[k] :- DIV( l_0, num[k] );

    with undef P[k]
      l_0 \in P[k - 1] \cup set_1( p[k] ) :- ;

    with undef \cup
      l_0 \in P[k - 1] or l_0 \in set_1( p[k] ) :- ;

    with cut DIV(l_0, p[k]) or DIV(l_0, num[k - 1])
      right by proof divsplit[k];

    with or right
      :- DIV(l_0, p[k]), DIV(l_0, num[k - 1]);

    with or left
      l_0 \in set_1( p[k] ) :-
      left by proof rec[k - 1];

    with undef set_1
      l_0 = p[k] :-;

    with undef DIV
      :- ex r l_0 * r = p[k];

    with ex right
      :- l_0 * 1 = p[k];

    explicit axiom l_0 = p[k] :- l_0 * 1 = p[k];
;

define proof divsplit1
  proves DIV(l_0, p[1]) :- DIV(l_0, num[1]);

  with undef DIV
    ex r l_0 * r = p[1] :- ex r l_0 * r = num[1];

  with ex left
    l_0 * r_0 = p[1] :-;

  with ex right
    :- l_0 * r_0 * p[0] = num[1];

  with undef num[1]
    :- l_0 * r_0 * p[0] = num[0] * p[1];

#  with undef num[0]
#    :- l_0 * r_0 * p[0] = p[0] * p[1];

#  explicit axiom l_0 * r_0 = p[1] :- l_0 * r_0 * p[0] = p[0] * p[1];
  explicit axiom l_0 * r_0 = p[1] :- l_0 * r_0 * p[0] = num[0] * p[1];
;

define recursive proof divsplit
  at level 1 proves
    DIV(l_0, p[0]) or DIV(l_0, num[0]) :- DIV(l_0, num[1]);

  with or left
    DIV(l_0, num[0]) :-
    left by proof divsplit2[0];
  
  with undef DIV
    ex r l_0 * r = num[0] :- ex r l_0 * r = num[1];

  with ex left
    l_0 * r_0 = num[0] :-;

#with undef num[0]
#    l_0 * r_0 = p[0] :-;

  with ex right
    :- l_0 * (r_0 * p[0]) = num[1];

  with undef num[1]
    :- l_0 * (r_0 * p[0]) = num[0] * p[0];

  explicit axiom  l_0 * r_0 = num[0] :- l_0 * (r_0 * p[0]) = num[0] * p[0];


  at level k proves
    DIV(l_0, p[k]) or DIV(l_0, num[k - 1]) :- DIV(l_0, num[k]);

  with or left
    DIV(l_0, num[k - 1]) :-
    left by proof divsplit2[k];

  with undef DIV
    ex r l_0 * r = num[k - 1] :- ex r l_0 * r = num[k];

  with ex left
    l_0 * r_0 = num[k - 1] :-;

  with ex right
    :- l_0 * (r_0 * p[k]) = num[k];

  with undef num[k]
    :- l_0 * (r_0 * p[k]) = num[k - 1] * p[k];

  explicit axiom l_0 * r_0 = num[k - 1] :- l_0 * (r_0 * p[k]) = num[k - 1] * p[k];
;

define recursive proof divsplit2
  at level k proves
    DIV(l_0, p[k]) :- DIV(l_0, num[k]);

  with undef DIV
    ex r l_0 * r = p[k] :- ex r l_0 * r = num[k];

  with ex left
    l_0 * r_0 = p[k] :-;

  with ex right
    :- l_0 * (r_0 * num[k - 1]) = num[k];

  with undef num[k]
    :- l_0 * (r_0 * num[k - 1]) = num[k - 1] * p[k];

#  with undef num[0]
#    :- l_0 * r_0 * p[0] = p[0] * p[1];

#  explicit axiom l_0 * r_0 = p[1] :- l_0 * r_0 * p[0] = p[0] * p[1];
  explicit axiom l_0 * r_0 = p[k] :- l_0 * (r_0 * num[k - 1]) = num[k - 1] * p[k];
;


#define recursive proof rec
#  with meta term q of type nat;
#  at level k proves
#    DIV(l_0, q), l_0 \in P[k] :-

#define recursive proof lem-neq2
#  at level k proves 
#    DIV( l_0, num[k] ), n_0 \in P[k] :- l_0 != n_0;
#
#  with undef P[k]
#    n_0 \in P[k - 1] \cup set_1( p[k] ) :-;
#
#  with undef \cup
#    n_0 \in P[k - 1] or n_0 \in set_1( p[k] ) :-;
#
#  at level 0 proves 
#    DIV( l_0, num[k] ), n_0 \in P[0] :- l_0 != n_0;
#;
#

#define recursive proof lem-neq
#  at level k proves
#    DIV( l_0, num[k] ) :- all n (n \in P[k] impl l_0 != n);
#
#  with all right
#    :- n_0 \in P[k] impl l_0 != n_0;
#
#  with impl right
#    n_0 \in P[k] :- l_0 != n_0;
#
#
#  continued by lem-neq2[k]
#;

#define recursive proof lem-neq
#  at level k proves
#    p = p[k] :- DIV(p, num[k])
#
#  at level 0 proves
#    p = p[0] :- DIV(p, num[k])
#
#define proof lem-div
#  :- all n (DIV(l_0, n + 1) and DIV(l_0, n) impl l_0 = 1 );
#
#  with all right
#    :- DIV(l_0, n_0 + 1) and DIV(l_0, n_0) impl l_0 = 1;
#
#  with impl right
#    DIV(l_0, n_0 + 1) and DIV(l_0, n_0) :- l_0 = 1;
#
#  with and left
#    DIV(l_0, n_0 + 1), DIV(l_0, n_0) :-;
#
#  with undef DIV
#    ex r l_0 * r = n_0 + 1 , ex r l_0 * r = n_0 :-;
#
#  with ex left
#    l_0 * r_0 = n_0 + 1 , l_0 * r_1 = n_0 :-;
#;

#define proof lem-div
# at level k,i proves
#   :- DIV(p[i], mum[k]);
#;
