################################################################################
# TYPES

define type nat;
define type myset;

################################################################################


################################################################################
# VARIABLES

define variable a,b of type any;
define variable x,y,z of type myset;
define variable i,j,k,l,m,n,o,q,r,s,t of type nat;
define variable i_0,k_0,l_0,m_0,n_0,t_0,r_0,r_1,q_0,t_1,t_2,t_3 of type nat;

################################################################################


################################################################################
# Helpers

# helpers to express ineuality better
define infix predicate != by not( a = b );

################################################################################


################################################################################
# ARITHMETIC

define constant 0, 1 of type nat;
define constant p of type nat;
define constant p' of type nat;

define infix function + of type nat,nat to nat with weight 100;
define infix function * of type nat,nat to nat with weight 200;
#define infix function \div of type nat,nat to nat with weight 100;

# these are new for Euclid's proof

define axiom l * r  = n + 1, l * q = n :- l = 1;
define axiom l * r = q :- l * ( r * n ) = n * q;
define axiom l = q :-  l * 1 = q;
define axiom l * r = q :- l * ( r * n ) = q * n;

# end new axioms

define axiom :- k + l = l + k;
define axiom :- k + ( l + m ) = ( k + l ) + m;
define axiom :- ( k + l ) + m = k + ( l + m );
define axiom :- k + 0 = k;
define axiom :- 0 + k = k;

define axiom k + l = k + m :- l = m;
define axiom k + l = m + l :- k = m;
define axiom k = l + k :- l = 0;
define axiom k = k + l :- l = 0;
define axiom k + l = k :- l = 0;
define axiom k + l = l :- k = 0;
define axiom k = l :- m + k = m + l;
define axiom 1 + ( k + 1 ) = 1 :- ;
define axiom k + 1 = 0 :- ;

define axiom :- k * l = l * k;
define axiom :- k * ( l * m ) = ( k * l ) * m;
define axiom :- ( k * l ) * m = k * ( l * m );
define axiom :- k * 1 = k;
define axiom :- 1 * k = k;

define axiom :- k * ( l + m ) = k * l + k * m;
define axiom :- ( k + l ) * m = k * m + l * m;
define axiom :- k * l + k * m = k * ( m + l );
define axiom :- k * l + m * l = ( k + m ) * l;

define axiom :- k * l + k = k * ( l + 1 );

#define axiom :- n = m, n + ( ( m \div n ) + 1 ) = m,
#                       m + ( ( n \div m ) + 1 ) = n;

define axiom :- ( k + l ) * m = l * m + k * m; # dist + comm
define axiom 1 = k * l :- k = 1;
define axiom 1 = l * k :- k = 1;

define infix atom predicate < of type nat,nat;

define axiom k < l, k < m, l < m, k + i * m = l + j * m :-;
define axiom k < l, k < m, l < m, l + i * m = k + j * m :-;

define axiom :- k = l, k < l, l < k;
define axiom :- 0 < k + 1;
define axiom 1 < k, 1 = l * k :- ;
define axiom 1 < k, k = 1 :- ;
define axiom n + 1 < m :- n < m;

define predicate PRE by all n ( 0 < n impl ex m n = m + 1 );

################################################################################


################################################################################
# SET function and predicates

define infix atom predicate \in of type nat, myset;
#define infix function \\ of type myset, myset to myset with weight 100;

define function set_1 through n \in set_1( m ) is defined by n = m;

define infix function \cup through m \in x \cup y is defined by 
  m \in x or m \in y
  with weight 100;
define infix function \cap through m \in x \cap y is defined by 
  m \in x and m \in y
  with weight 200;

define infix predicate \subseteq by all n ( (n \in y) impl (n \in x) );
define predicate empty by not ex n ( n \in x );

define function compN through n \in compN( x ) is defined by not n \in x;

# myset equality
define equality for x = y as
  all n ( ( n \in x impl n \in y ) and ( n \in y impl n \in x ) );

# infinity
define predicate INF by all m ex n ( m + n + 1 \in x );

################################################################################


################################################################################
# PROGRESSIONS

define function \nu through m \in \nu( k, l ) is defined by
  ex r ( m = k + r * l );

# helper
define function U through m \in U( k, l ) is defined by 
  ex i ( ( i < l and not i = k ) and m \in \nu( i, l ) );

################################################################################


################################################################################
# NUMBER THEORY

# remainder
define predicate REM by
  all n ( 0 < n impl all m ex o ( o < n and m \in \nu( o, n ) ) );
# all m all l ex k ( m \in \nu( k, l + 1 ) );

# devides
define predicate DIV by ex r l * r = k;

# prime number
define predicate PRIME by
  1 < k and all l ( DIV( l, k ) impl ( l = 1 or l = k ) );

# prime divisor
define predicate PRIME-DIV by
  all m ( m != 1 impl ex l ( PRIME(l) and DIV( l, m ) ) );

################################################################################


################################################################################
# TOPOLOGY

# open
define predicate O by 
  all m ( ( m \in x ) impl ( ex t ( \nu( m, t + 1 ) \subseteq x ) ) );
# empty(x) or all m ( ( m \in x ) impl ( ex l ( \nu( m, l ) \subseteq x ) ) );

# closed
define predicate C by O( compN( x ) );

################################################################################
