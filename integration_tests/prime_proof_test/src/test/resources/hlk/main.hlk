reference defs.hlk;
reference inf_proof.hlk;
reference c_union.hlk;
reference prog_closed.hlk;

define recursive function P to myset
  at level 0 by set_1( p[0] )
  at level k by P[k - 1] \cup set_1( p[k] )
;

define recursive function S to myset
  at level 0 by \nu( 0, p[0] )
  at level k by S[k - 1] \cup \nu( 0, p[k] )
;

define recursive predicate F
# at level 0 by all t ( ( PRIME(t) impl t \in P[0] ) and
#                       ( t \in P[0] impl PRIME(t) ) )
  at level k by all t ( ( PRIME(t) impl t \in P[k] ) and
                        ( t \in P[k] impl PRIME(t) ) )
;

define recursive proof the-proof-rec
  at level k proves
    F[k], PRIME-DIV, REM :- ;

  with cut INF( set_1( 1 ) )
    right by proof \beta;
  with cut not empty( set_1(1) )
    left by proof \alpha;
  with cut O( set_1(1) )
    right by proof the-proof-a;
  with cut C( compN( set_1(1) ) )
    right by proof \varphi_{CO};
  with paramod
    left by proof \varphi_{1L}[k]
    right by proof \varphi_{Union-\nu}[k];
;

define proof the-proof-a
  proves
    O( set_1(1) ), not empty( set_1(1) ) :- INF( set_1(1) );

  with cut all y ( ( O(y) and not empty( y ) ) impl INF(y) )
    left by proof inf-proof;
  with all left
    ( O( set_1(1) ) and not empty( set_1(1) ) ) impl INF( set_1(1) ) :-;
  with impl left
    :- O( set_1(1) ) and not empty( set_1(1) )
    right auto propositional INF( set_1(1) ) :- INF( set_1(1) );
  with and right
    :- O( set_1(1) )
    right auto propositional not empty( set_1(1) ) :- not empty( set_1(1) );
;

define proof \alpha
  proves
    :- not empty( set_1(1) );

  with not right
    empty( set_1(1) ) :- ;
  with undef empty
    not ex n ( n \in set_1(1) ) :- ;
  with not left
    :- ex n ( n \in set_1(1) );
  with ex right
    :- 1 \in set_1(1);
  with undef set_1
    :- 1 = 1;
;

define proof \beta
  proves
    INF( set_1( 1 ) ) :- ;

  with undef INF
    all m ex n ( m + n + 1 \in set_1( 1 ) ) :- ;
  with all left
    ex n ( 1 + n + 1 \in set_1( 1 ) ) :- ;
  with ex left
    1 + l_0 + 1 \in set_1( 1 ) :- ;
  with undef set_1
    1 + l_0 + 1 = 1 :- ;
;

define proof \varphi_{CO}
  proves
    C( compN( set_1(1) ) ) :- O( set_1(1) );

  with undef C
    O( compN( compN( set_1(1) ) ) ) :- ;
  with paramod
    O( set_1(1) ) :-
    left by proof compcomp( set_1(1) );
;

define proof compcomp
  with meta term x of type myset;
  proves
    :- compN( compN(x) ) = x;

  with undef equality of type myset, myset
    :- all n ( ( n \in compN( compN(x) ) impl n \in x ) and
               ( n \in x impl n \in compN( compN(x) ) ) );
  with all right
    :- ( n_0 \in compN( compN(x) ) impl n_0 \in x ) and
       ( n_0 \in x impl n_0 \in compN( compN(x) ) );
  with and right
    :- n_0 \in compN( compN(x) ) impl n_0 \in x
    right by proof compcomp-a(x);
  with impl right
    n_0 \in compN( compN(x) ) :- n_0 \in x;
  with undef compN
    not n_0 \in compN(x) :- ;
  with not left
    :- n_0 \in compN(x);
  with undef compN
    :- not n_0 \in x;
  with not right
    n_0 \in x :-;
;

define  proof compcomp-a
  with meta term x of type myset;
  proves
    :- n_0 \in x impl n_0 \in compN( compN(x) );

  with impl right
    n_0 \in x :- n_0 \in compN( compN(x) );
  with undef compN
    :- not n_0 \in compN(x);
  with not right
    n_0 \in compN(x) :-;
  with undef compN
    not n_0 \in x :-;
  with not left
    :- n_0 \in x;
;

define recursive proof \varphi_{1L}
  at level k proves
    F[k], PRIME-DIV :- S[k] = compN( set_1(1) );

  with undef equality of type myset, myset
    :- all n ( ( n \in S[k] impl n \in compN( set_1(1) ) ) and
               ( n \in compN( set_1(1) ) impl n \in S[k] ) );
  with all right
    :- ( m_0 \in S[k] impl m_0 \in compN( set_1(1) ) ) and
       ( m_0 \in compN( set_1(1) ) impl m_0 \in S[k] );
  with and right
    :- m_0 \in S[k] impl m_0 \in compN( set_1(1) )
    right by proof \varphi_{1L}-a[k];
  with impl right
    m_0 \in S[k] :- m_0 \in compN( set_1(1) );
  with undef compN
    :- not m_0 \in set_1(1);
  with cut not m_0 = 1
    left by proof \varphi_{1LA}[k];
  with auto propositional
    m_0 \in set_1(1) :- m_0 = 1;
  with undef set_1
    m_0 = 1 :- ;
;

define recursive proof \varphi_{1L}-a
  at level k proves
    F[k], PRIME-DIV :- m_0 \in compN( set_1(1) ) impl m_0 \in S[k];

  with impl right
    m_0 \in compN( set_1(1) ) :- m_0 \in S[k];
  with undef compN
    not m_0 \in set_1(1) :-;
  with cut not m_0 = 1
    right by proof \varphi_{1LB}[k];
  with auto propositional
    m_0 = 1 :- m_0 \in set_1(1);
  with undef set_1
    :- m_0 = 1;
;

define recursive proof \varphi_{1LA}
  at level k proves
    F[k], PRIME-DIV, m_0 \in S[k] :- not m_0 = 1;

  with cut ex t ( t \in P[k] and m_0 \in \nu( 0, t ) )
    left by proof \varrho_2[k];
  with undef F[k]
    all t ( ( PRIME(t) impl t \in P[k] ) and
            ( t \in P[k] impl PRIME(t) ) ) :- ;
  continued by proof \Pi_2( P[k] );
;

define recursive proof \varphi_{1LB}
  at level k proves
    F[k], PRIME-DIV, not m_0 = 1 :- m_0 \in S[k];

  with cut ex t ( t \in P[k] and m_0 \in \nu( 0, t ) )
    right by proof \varrho_1[k];
  with undef F[k]
    all t ( ( PRIME(t) impl t \in P[k] ) and
            ( t \in P[k] impl PRIME(t) ) ) :- ;
  continued by proof \Pi_1( P[k] );
;

define recursive proof \varrho_1
  at level k proves
    ex t ( t \in P[k] and m_0 \in \nu( 0, t ) ) :- m_0 \in S[k];

  with ex left
    t_0 \in P[k] and m_0 \in \nu( 0, t_0 ) :- ;
  with and left
    t_0 \in P[k], m_0 \in \nu( 0, t_0 ) :- ;
  continued by proof \lambda[k];
;

define recursive proof \lambda
  at level 0 proves
    t_0 \in P[0], m_0 \in \nu( 0, t_0 ) :- m_0 \in S[0];

  with undef P[0]
    t_0 \in set_1( p[0] ) :- ;
  with undef S[0]
    :- m_0 \in \nu( 0, p[0] );
  with undef set_1
    t_0 = p[0] :- ;
  with paramod by t_0 = p[0]
    right :- m_0 \in \nu( 0, t_0 );

  at level k proves
    t_0 \in P[k], m_0 \in \nu( 0, t_0 ) :- m_0 \in S[k];

  with undef P[k]
    t_0 \in P[k - 1] \cup set_1( p[k] ) :- ;
  with undef S[k]
    :- m_0 \in S[k - 1] \cup \nu( 0, p[k] );
  with undef \cup
    t_0 \in P[k - 1] or t_0 \in set_1( p[k] ) :- ;
  with undef \cup
    :- m_0 \in S[k - 1] or m_0 \in \nu( 0, p[k] );
  with or right
    :- m_0 \in S[k - 1], m_0 \in \nu( 0, p[k] );
  with or left
    t_0 \in set_1( p[k] ) :-
    left by proof \lambda[k - 1];
  with undef set_1
    t_0 = p[k] :-;
  with paramod by t_0 = p[k]
    right :- m_0 \in \nu( 0, t_0 );
;

define recursive proof \varrho_2
  at level 0 proves
    m_0 \in S[0] :- ex t ( t \in P[0] and m_0 \in \nu( 0, t ) );

    with undef S[0]
      m_0 \in \nu( 0, p[0] ) :- ;
# changed to make undef work on atomic formulas only
    with ex right
      :- p[0] \in P[0] and m_0 \in \nu( 0, p[0] ) ;
    with and right
      :- p[0] \in P[0]
      right auto propositional m_0 \in \nu( 0, p[0] ) :- m_0 \in \nu( 0, p[0] );
    with undef P[0]
      :- p[0] \in set_1( p[0] ) ;
#    with undef P[0]
#      :- ex t ( t \in set_1( p[0] ) and m_0 \in \nu( 0, t ) );
#    with ex right
#      :- p[0] \in set_1( p[0] ) and m_0 \in \nu( 0, p[0] );
#    with and right
#      :- p[0] \in set_1( p[0] )
#      right auto propositional;
    with undef set_1
      :- p[0] = p[0];

  at level k proves
    m_0 \in S[k] :- ex t ( t \in P[k] and m_0 \in \nu( 0, t ) );

  with undef S[k]
    m_0 \in S[k - 1] \cup \nu( 0, p[k] ) :- ;
  with undef \cup
    m_0 \in S[k - 1] or m_0 \in \nu( 0, p[k] ) :- ;
  with or left
    m_0 \in S[k - 1] :-
    right by proof \varrho_{2ii}[k];
  with cut ex t ( t \in P[k - 1] and m_0 \in \nu( 0, t ) )
    left by proof \varrho_2[k - 1];
  with ex left
    t_0 \in P[k - 1] and m_0 \in \nu( 0, t_0 ) :- ;
# changed to make def rule work on atomic formulas only
  with ex right
    :- t_0 \in P[k] and m_0 \in \nu( 0, t_0 ) ;
  with and right
    :- t_0 \in P[k]
    right auto propositional t_0 \in P[k - 1] and m_0 \in \nu( 0, t_0 ) :- m_0 \in \nu( 0, t_0 );
  with undef P[k]
    :- t_0 \in P[k - 1] \cup set_1( p[k] ) ;
#  with undef P[k]
#    :- ex t ( t \in P[k - 1] \cup set_1( p[k] ) and m_0 \in \nu( 0, t ) );
#  with ex right
#    :- t_0 \in P[k - 1] \cup set_1( p[k] ) and m_0 \in \nu( 0, t_0 );
#  with and right
#    :- t_0 \in P[k - 1] \cup set_1( p[k] )
#    right auto propositional;
  with undef \cup
    :- t_0 \in P[k - 1] or t_0 \in set_1( p[k] );
  continued auto propositional t_0 \in P[k - 1] and m_0 \in \nu( 0, t_0 ) :- t_0 \in P[k - 1] or t_0 \in set_1( p[k] );
;

define recursive proof \varrho_{2ii}
  at level k proves
    m_0 \in \nu( 0, p[k] ) :- ex t ( t \in P[k] and m_0 \in \nu( 0, t ) );

# changed to make def rule work on atomic formulas only
  with ex right
    :- p[k] \in P[k] and m_0 \in \nu( 0, p[k] ) ;
  with and right
    :- p[k] \in P[k]
    right auto propositional m_0 \in \nu ( 0, p[k] ) :- m_0 \in \nu ( 0, p[k] );
  with undef P[k]
    :- p[k] \in P[k - 1] \cup set_1( p[k] ) ;
#  with undef P[k]
#    :- ex t ( t \in P[k - 1] \cup set_1( p[k] ) and m_0 \in \nu( 0, t ) );
#  with ex right
#    :- p[k] \in P[k - 1] \cup set_1( p[k] ) and m_0 \in \nu( 0, p[k] );
#  with and right
#    :- p[k] \in P[k - 1] \cup set_1( p[k] )
#    right auto propositional;
  with undef \cup
    :- p[k] \in P[k - 1] or p[k] \in set_1( p[k] );
  with or right
    :- p[k] \in set_1( p[k] );
  with undef set_1
    :- p[k] = p[k];
;

define proof \Pi_1
  with meta term X of type myset;

  proves
    all t ( ( PRIME(t) impl t \in X ) and ( t \in X impl PRIME(t) ) ),
    PRIME-DIV, not m_0 = 1 :-
    ex t ( t \in X and m_0 \in \nu( 0, t ) );

  with undef PRIME-DIV
    all m ( m != 1 impl ex l ( PRIME(l) and DIV( l, m ) ) ) :- ;
  with all left
    m_0 != 1 impl ex l ( PRIME(l) and DIV( l, m_0 ) ) :- ;
  with impl left
    ex l ( PRIME(l) and DIV( l, m_0 ) ) :-
    left by proof \Pi_1-a;
  with ex left
    PRIME(l_0) and DIV( l_0, m_0 ) :- ;
  with ex right
    :- l_0 \in X and m_0 \in \nu( 0, l_0 );
  with and left
    PRIME(l_0), DIV( l_0, m_0 ) :- ;
  with all left
    ( PRIME(l_0) impl l_0 \in X ) and ( l_0 \in X impl PRIME(l_0) ) :- ;
  with and left
    PRIME(l_0) impl l_0 \in X :- ;
  with impl left
    l_0 \in X :-
    left auto propositional PRIME(l_0) :- PRIME(l_0);
  with and right
    :- m_0 \in \nu( 0, l_0 )
    left auto propositional l_0 \in X :- l_0 \in X;
  with undef DIV
    ex r l_0 * r = m_0 :- ;
  with undef \nu
    :- ex r ( m_0 = 0 + r * l_0 );
  with ex left
    l_0 * n_0 = m_0 :- ;
  with ex right
    :- m_0 = 0 + n_0 * l_0;
  with paramod by 0 + n_0 * l_0 = n_0 * l_0
    right :- m_0 = n_0 * l_0;
  with paramod by n_0 * l_0 = l_0 * n_0
    right :- m_0 = l_0 * n_0;
  with paramod by l_0 * n_0 = m_0
    right :- m_0 = m_0;
;

define proof \Pi_1-a
  proves
    not m_0 = 1 :- m_0 != 1;

  with undef !=
    :- not m_0 = 1;
  continued auto propositional not m_0 = 1 :- not m_0 = 1;
;

define proof \Pi_2
  with meta term X of type myset;

  proves
    all t ( ( PRIME(t) impl t \in X ) and ( t \in X impl PRIME(t) ) ),
    ex t ( t \in X and m_0 \in \nu( 0, t ) ) :- not m_0 = 1;

  with ex left
    t_0 \in X and m_0 \in \nu( 0, t_0 ) :- ;
  with and left
    t_0 \in X, m_0 \in \nu( 0, t_0 ) :- ;
  with all left
    ( PRIME(t_0) impl t_0 \in X ) and ( t_0 \in X impl PRIME(t_0) ) :- ;
  with and left
    # PRIME(t_0) impl t_0 \in X, t_0 \in X impl PRIME(t_0) :- ;
    t_0 \in X impl PRIME(t_0) :- ;
  with impl left
    PRIME(t_0) :-
    left auto propositional t_0 \in X :- t_0 \in X;
  with undef PRIME
    1 < t_0 and all l ( DIV( l, t_0 ) impl ( l = 1 or l = t_0 ) ) :- ;
  with and left
    1 < t_0 :- ;
  with undef \nu
    ex r ( m_0 = 0 + r * t_0 ) :- ;
  with ex left
    m_0 = 0 + n_0 * t_0 :- ;
  with paramod by 0 + n_0 * t_0 = n_0 * t_0
    right m_0 = n_0 * t_0 :- ;
  with not right
    m_0 = 1 :- ;
  with paramod by m_0 = 1
    right 1 = n_0 * t_0, m_0 = 1 :- ;
  explicit axiom
    1 < t_0, 1 = n_0 * t_0 :- ;
;

# Hallo Hendrik,
# 
# Man könnte folgendes tun:
# 
# Definiere zusätzlich eine rekursive Formel Q(k) als
# Q(k) = PRIME(p[0]) and PRIME(p[1]) and ... and PRIME(p[k])

define recursive predicate Q
  at level 0 by PRIME( p[0] )
  at level k by Q[k - 1] and PRIME( p[k] )
;

# und eine R(k) als
# all t ( t \in P[k] implies PRIME[t] )

define recursive predicate R
  at level 0 by all t ( t \in P[0] impl PRIME( t ) )
  at level k by all t ( t \in P[k] impl PRIME( t ) )
;

# Die Sequente
# 
# F[k] :- R[k]

define recursive proof FR
  at level k proves
    F[k] :- R[k];

  with undef R[k]
    :- all t ( t \in P[k] impl PRIME( t ) );
  with all right
    :- t_0 \in P[k] impl PRIME( t_0 );
  with undef F[k]
    all t ( ( PRIME(t) impl t \in P[k] ) and
            ( t \in P[k] impl PRIME(t) ) ) :- ;
  with all left
    ( PRIME(t_0) impl t_0 \in P[k] ) and ( t_0 \in P[k] impl PRIME(t_0) ) :- ;
  with and left
    t_0 \in P[k] impl PRIME( t_0 ) :- ;
;

# sowie
# 
# R[k] :- Q[k]

define recursive proof RQ
  at level 0 proves
    R[0] :- Q[0];

  with undef Q[0]
    :- PRIME( p[0] );
  with undef R[0]
    all t ( t \in P[0] impl PRIME( t ) ) :- ;
  with all left
    p[0] \in P[0] impl PRIME( p[0] ) :- ;
  with impl left
    left by proof pP[0]
    right auto propositional PRIME( p[0] ) :- PRIME( p[0] );

  at level k proves
    R[k] :- Q[k];

  with undef Q[k]
    :- Q[k - 1] and PRIME( p[k] );
  with cut R[k - 1]
    left by proof RR[k];
  with and right
    :- PRIME( p[k] )
    left by proof RQ[k - 1];
  with undef R[k]
    all t ( t \in P[k] impl PRIME( t ) ) :- ;
  with all left
    p[k] \in P[k] impl PRIME( p[k] ) :- ;
  with impl left
    left by proof pP[0]
    right auto propositional PRIME( p[k] ) :- PRIME( p[k] );
;

define recursive proof RR
  at level k proves
    R[k] :- R[k - 1];

  with undef R[k - 1]
    :- all t ( t \in P[k - 1] impl PRIME( t ) );
  with all right
    :- t_0 \in P[k - 1] impl PRIME( t_0 );
  with impl right
    t_0 \in P[k - 1] :- PRIME( t_0 );
  with undef R[k]
    all t ( t \in P[k] impl PRIME( t ) ) :- ;
  with all left
    t_0 \in P[k] impl PRIME( t_0 ) :- ;
  with impl left
    :- t_0 \in P[k]
    right auto propositional PRIME( t_0 ) :- PRIME( t_0 );
  with undef P[k]
    :- t_0 \in P[k - 1] \cup set_1( p[k] );
  with undef \cup
    :- t_0 \in P[k - 1] or t_0 \in set_1( p[k] );
  continued auto propositional t_0 \in P[k - 1] :- t_0 \in P[k - 1] or t_0 \in set_1( p[k] );
;

define recursive proof pP
  at level 0 proves
    :- p[0] \in P[0];

  with undef P[0]
    :- p[0] \in set_1( p[0] );
  with undef set_1
    :- p[0] = p[0];

  at level k proves
    :- p[k] \in P[k];

  with undef P[k]
    :- p[k] \in P[k - 1] \cup set_1( p[k] );
  with undef \cup
    :- p[k] \in P[k - 1] or p[k] \in set_1( p[k] );
  with or right
    :- p[k] \in set_1( p[k] );
  with undef set_1
    :- p[k] = p[k];
;


# lassen sich dann uniform in k zeigen (also mit hlk codieren).
# 
# Mit Schnitten kann man sich dann auf der linken Seite (im Hauptbeweis) 
# aufwärtsgehend aus F[k] das Q[k] erzeugen und aus diesem mittel and:left die 
# gewünschten Konjunkte holen.

define recursive proof FQ
  at level k proves
    F[k] :- Q[k];

  with cut R[k]
    left by proof FR[k]
    right by proof RQ[k];
;

define recursive proof \varphi_{Union-\nu}
  at level k proves
    F[k], REM :- C( S[k] );

  with cut Q[k]
    left by proof FQ[k]
    right by proof \varphi_{Union-\nu}-Q[k];
;

define recursive proof \varphi_{Union-\nu}-Q
  at level 0 proves
    Q[0], REM :- C( S[0] );
  with undef Q[0]
    PRIME( p[0] ) :- ;
  with cut 0 < p[0]
    left by proof pgt0( p[0] );
  with undef S[0]
    :- C( \nu( 0, p[0] ) );
  with cut C( \nu( 0, p[0] ) )
    left by proof prog-closed( 0, p[0] );

  at level k proves
    Q[k], REM :- C( S[k] );
  with undef Q[k]
    Q[k - 1] and PRIME( p[k] ) :- ;
  with and left
    Q[k - 1], PRIME( p[k] ) :- ;
  with cut 0 < p[k]
    left by proof pgt0( p[k] );
  with undef S[k]
    :- C( S[k - 1] \cup \nu( 0, p[k] ) );
  with cut C( \nu( 0, p[k] ) )
    left by proof prog-closed( 0, p[k] );
  with cut C( S[k - 1] )
    left by proof \varphi_{Union-\nu}-Q[k - 1]
    right by proof \varphi_{C-Union}( S[k - 1], \nu( 0, p[k] ) );
;

define proof pgt0
  with meta term n of type nat;
  proves
    PRIME(n) :- 0 < n;

  with cut 1 < n
    left by proof pgt1(n);
  with paramod by 0 + 1 = 1
    right 0 + 1 < n :- 0 < n;
  explicit axiom 0 + 1 < n :- 0 < n;
;

define proof pgt1
  with meta term n of type nat;
  proves
    PRIME(n) :- 1 < n;

  with undef PRIME
    1 < n and all l ( DIV( l, n ) impl ( l = 1 or l = n ) ) :- ;
  with and left
    1 < n :- ;
;

